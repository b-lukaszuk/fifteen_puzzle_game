{"version":3,"sources":["board/Field.ts","utils/arr2d.ts","board/Board.ts","components/Button.tsx","conteners/GameItem.tsx","conteners/GameRow.tsx","conteners/GameBoard.tsx","conteners/GameInfo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Field","val","_id","_val","_isLegalMove","this","nextId","newVal","getVal","toString","scramble","arr1d","times","length","arrCopy","i","j","Math","floor","random","temp","reshape","nrows","ncols","RangeError","result","r","row","c","tmp","shift","push","isEven","someNum","isOdd","isSolvable","puzzle","numberOfInversions","arr2d","invCount","flattenArr2d","getInversionsCount","posOfEmpty","nRows","Error","findBlankPos","pyRange","start","end","by","arguments","undefined","Board","initBoard","_board","_solvedBoard","_transformToArrOfFields","setIsLegalMove","isMoveLegal","arr2dNums","newRow","rowOfNums","searchedNum","getBoard","_getLocOfNum","numToMove","mvRow","mvCol","_getLocOfEmpty","emptyRow","emptyCol","num1","num2","n1row","n1col","n2row","n2col","v1","v2","setVal","move","_swapNumsOnBoard","Button","props","className","onClick","btnText","GameItem","fieldIn","field","onClickIn","getIsLegalMove","join","GameRow","arrFieldsIn","arrFields","fieldOnClickIn","fieldOnClick","map","aField","getId","GameBoard","gameBoardIn","gameBoard","timeIn","time","moveNoIn","moveNo","textColor","rowId","GameInfo","gameStatusIn","gameStatus","href","App","getRandomSolvablePuzzle","puzzleSolvable","useState","setGameBoard","gameOver","setGameOver","moveCount","setMoveCount","setTime","useEffect","intervalId","setInterval","clearInterval","curTime","sec","minStr","secStr","timeToTimer","alert","makeMove","get2dArrOfNums","isSolved","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d50f526.chunk.js","sourcesContent":["class Field {\n\n    static nextId: number = 0;\n    private _id: number = 0;\n    private _val: number = 0;\n    private _isLegalMove: boolean = false;\n\n    public constructor(val: number) {\n        this._id = Field.nextId;\n        Field.nextId += 1;\n        this._val = val;\n    }\n\n    public getId(): number {\n        return this._id;\n    }\n\n    public getVal(): number {\n        return this._val;\n    }\n\n    public setVal(newVal: number): void {\n        this._val = newVal;\n    }\n\n    public setIsLegalMove(newVal: boolean): void {\n        this._isLegalMove = newVal;\n    }\n\n    public getIsLegalMove(): boolean {\n        return this._isLegalMove;\n    }\n\n    public toString(): string {\n        if (this.getVal() === 16) { // 16 is empty field\n            return \"\";\n        } else {\n            return this.getVal().toString();\n        }\n    }\n}\n\nexport default Field;\n","function scramble(arr1d: any[], times: number): any[] {\n    // the Fisher-Yates algorithm\n    // https://dev.to/codebubb/how-to-shuffle-an-array-in-javascript-2ikj\n    if (times > (arr1d.length - 1) || times <= 0) { times = arr1d.length - 1 }\n    let arrCopy: any[] = [...arr1d];\n    for (let i = times; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = arrCopy[i];\n        arrCopy[i] = arrCopy[j];\n        arrCopy[j] = temp;\n    }\n    return arrCopy;\n}\n\nfunction reshape(arr1d: any[], nrows: number, ncols: number): any[][] {\n    if (arr1d.length !== (nrows * ncols)) {\n        throw new RangeError(\"(nrows * ncols) must be equal arr1d.length\");\n    }\n    let result: any[][] = []\n    let arrCopy: any[] = [...arr1d];\n    for (let r = 0; r < nrows; r++) {\n        let row: any[] = [];\n        for (let c = 0; c < ncols; c++) {\n            let tmp: any = arrCopy.shift()\n            row.push(tmp);\n        }\n        result.push(row);\n    }\n    return result;\n}\n\n// from\n// https://www.geeksforgeeks.org/check-instance-15-puzzle-solvable/\n// modified by me\nfunction flattenArr2d(arr2d: any[][]): any[] {\n    let arr1d: any[] = [];\n    for (let r = 0; r < arr2d.length; r++) {\n        for (let c = 0; c < arr2d[r].length; c++) {\n            arr1d.push(arr2d[r][c]);\n        }\n    }\n    return arr1d;\n}\n\n// in the example blank is equal to 0\n// in my program it is 16 (that's why I got break in for loop with i)\nfunction getInversionsCount(arr2d: number[][]): number {\n    let invCount: number = 0;\n    let nrows: number = arr2d.length;\n    let arr1d: number[] = flattenArr2d(arr2d);\n    for (let i = 0; i < nrows * nrows - 1; i++) {\n        if (arr1d[i] === 16) { continue; }\n        for (let j = i + 1; j < nrows * nrows; j++) {\n            if (i < j && arr1d[i] > arr1d[j]) {\n                invCount += 1;\n            }\n        }\n    }\n    return invCount;\n}\n\n// find Position of blank (16) from bottom\n// number of moves it takes to move from original position (3, 3)\n// to the position it is now\nfunction findBlankPos(puzzle: number[][]): number {\n    let nRows: number = puzzle.length;\n    // start from bottom-right corner of matrix\n    for (let i = nRows - 1; i >= 0; i--) {\n        for (let j = nRows - 1; j >= 0; j--) {\n            if (puzzle[i][j] === 16) {\n                return nRows - i;\n            }\n        }\n    }\n    throw new Error(\"Number 16 is not in the 2d array. It must be here\");\n}\n\nfunction isEven(someNum: number): boolean {\n    return (someNum % 2) === 0;\n}\n\nfunction isOdd(someNum: number): boolean {\n    return !isEven(someNum);\n}\n\nfunction isSolvable(puzzle: number[][]): boolean {\n    let numberOfInversions: number = getInversionsCount(puzzle);\n    // If grid is odd, return true if inversion\n    // count is even.\n    if (isOdd(puzzle.length) && isEven(numberOfInversions)) {\n        return true;\n    } else { // grid is even\n        let posOfEmpty: number = findBlankPos(puzzle);\n        if (isEven(posOfEmpty) && isOdd(numberOfInversions)) {\n            return true;\n        }\n        if (isOdd(posOfEmpty) && isEven(numberOfInversions)) {\n            return true;\n        }\n        return false;\n    }\n}\n\n/**\n * imitates python's range function, retruns arrOfConsecutiveNums\n * imitates a bit func overloading from c++, java, e.g.\n * range(2) -> [0, 1]; range(-2) -> [0, -1] (default end=start, start=0, by=1)\n * range(1, 3) -> [1, 2, 3]; range(-1, -3) -> [-1, -2] (default by=1)\n * @param {number} start first value (incl)\n * @param {number} end end value (excl)\n * @param {number} by step betw vals (always positive, even if numbers go down)\n * @returns {Array<number>} array of vals from, to, by\n */\nfunction pyRange(start: number, end?: number, by?: number): Array<number> {\n    let result: Array<number> = [];\n\n    if (arguments.length === 1) {\n        end = start;\n        start = 0;\n        by = 1;\n    }\n\n    // otherwise strict checker in Angular protests\n    by = (by === undefined || by === 0) ? 1 : by;\n    end = (end === undefined) ? (start + 1) : end;\n\n    if (start < end) {\n        for (let i = start; i < end; i += by) {\n            result.push(i);\n        }\n    } else {\n        for (let i = start; i > end; i -= by) {\n            result.push(i);\n        }\n    }\n\n    return result;\n}\n\n\nexport { scramble, reshape, isSolvable, pyRange };\n","import Field from './Field';\nimport { reshape, pyRange } from '../utils/arr2d';\n\nclass Board {\n\n    private _board: Field[][] = [];\n    private _solvedBoard: Field[][] = [];\n\n    public constructor(initBoard: number[][]) {\n        this._board = this._transformToArrOfFields(initBoard);\n        let tmp: number[][] = reshape(pyRange(1, 17, 1), 4, 4);\n        this._solvedBoard = this._transformToArrOfFields(tmp);\n\n        for (let r = 0; r < this._board.length; r++) {\n            for (let c = 0; c < this._board[r].length; c++) {\n                this._board[r][c].setIsLegalMove(this.isMoveLegal(\n                    this._board[r][c].getVal()));\n            }\n        }\n    }\n\n    private _transformToArrOfFields(arr2dNums: number[][]): Field[][] {\n        let result: Field[][] = [];\n        for (let r = 0; r < arr2dNums.length; r++) {\n            let newRow: Field[] = [];\n            for (let c = 0; c < arr2dNums[r].length; c++) {\n                newRow.push(new Field(arr2dNums[r][c]));\n            }\n            result.push(newRow);\n        }\n        return result;\n    }\n\n    public getBoard(): Field[][] {\n        return this._board;\n    }\n\n    public get2dArrOfNums(): number[][] {\n        let result: number[][] = [];\n        for (let r = 0; r < this._board.length; r++) {\n            let rowOfNums: number[] = [];\n            for (let c = 0; c < this._board[r].length; c++) {\n                rowOfNums.push(this._board[r][c].getVal());\n            }\n            result.push(rowOfNums);\n        }\n        return result;\n    }\n\n    private _getLocOfNum(searchedNum: number): number[] {\n        let result: number[] = [];\n        for (let r = 0; r < this.getBoard().length; r++) {\n            for (let c = 0; c < this.getBoard()[r].length; c++) {\n                if (this.getBoard()[r][c].getVal() === searchedNum) {\n                    result = [r, c];\n                    break;\n                }\n            }\n        }\n        return result\n    }\n\n    private _getLocOfEmpty(): number[] {\n        return this._getLocOfNum(16); // 16 is empty\n    }\n\n    public isMoveLegal(numToMove: number): boolean {\n        let [mvRow, mvCol] = this._getLocOfNum(numToMove);\n        let [emptyRow, emptyCol] = this._getLocOfEmpty();\n        if (mvRow === emptyRow) {\n            if ((mvCol - 1) === emptyCol || (mvCol + 1) === emptyCol) {\n                return true;\n            }\n        } else if (mvCol === emptyCol) {\n            if ((mvRow - 1) === emptyRow || (mvRow + 1) === emptyRow) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private _swapNumsOnBoard(num1: number, num2: number): void {\n        let [n1row, n1col] = this._getLocOfNum(num1);\n        let [n2row, n2col] = this._getLocOfNum(num2);\n        let v1: number = this._board[n1row][n1col].getVal();\n        let v2: number = this._board[n2row][n2col].getVal();\n        this._board[n1row][n1col].setVal(v2);\n        this._board[n2row][n2col].setVal(v1);\n    }\n\n    public makeMove(move: number): void {\n        if (this.isMoveLegal(move)) {\n            this._swapNumsOnBoard(move, 16); // 16 is empty\n        }\n        // else {\n        //     window.alert(\"illegal move\");\n        // }\n    }\n\n    public isSolved(): boolean {\n        for (let r = 0; r < this._board.length; r++) {\n            for (let c = 0; c < this._board[r].length; c++) {\n                if (this._board[r][c].getVal() !==\n                    this._solvedBoard[r][c].getVal()) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n\nexport default Board;\n","import React from 'react';\n\nimport \"./Button.css\";\n\ninterface Props {\n    className: string;\n    btnText: string;\n    onClick: Function;\n}\n\nconst Button: React.FC<Props> = (props) => {\n    return (\n        <button className={props.className}\n            onClick={() => props.onClick()}>\n            {props.btnText}\n        </button>\n    );\n}\n\nexport default Button;\n","import React from 'react';\n\nimport Field from '../board/Field';\n\nimport './GameItem.css';\n\ninterface Props {\n    field: Field;\n    onClick: Function;\n}\n\nconst GameItem: React.FC<Props> = (props) => {\n    const fieldIn: Field = props.field;\n    const onClickIn: Function = props.onClick;\n    return (\n        <td onClick={() => { onClickIn(fieldIn.getVal()) }}\n            className={[fieldIn.getVal() === 16 ? 'empty' : 'digit',\n            fieldIn.getIsLegalMove() ? 'legalMove' : ''].join(\" \")}>\n            {fieldIn.toString()}\n        </td>\n    )\n}\n\nexport default GameItem;\n","import React from 'react';\n\nimport Field from '../board/Field';\nimport GameItem from './GameItem';\n\ninterface Props {\n    arrFields: Field[];\n    fieldOnClick: Function;\n}\nconst GameRow: React.FC<Props> = (props) => {\n    const arrFieldsIn: Field[] = props.arrFields;\n    const fieldOnClickIn: Function = props.fieldOnClick;\n    return (\n        <tr>\n            {arrFieldsIn.map((aField) => {\n                return <GameItem key={aField.getId()} field={aField}\n                    onClick={fieldOnClickIn} />\n            })}\n        </tr>\n    )\n}\n\nexport default GameRow;\n","import React from 'react';\n\nimport Field from '../board/Field';\nimport GameRow from './GameRow';\n\nimport './GameBoard.css';\n\ninterface Props {\n    gameBoard: Field[][];\n    fieldOnClick: Function;\n    time: string;\n    moveNo: number;\n}\n\n// manual says to avoid map with index, but that is the best solution I found\n// for the 2d array:\n// https://www.pluralsight.com/guides/display-multidimensional-array-data-in-react\nconst GameBoard: React.FC<Props> = (props) => {\n    const gameBoardIn: Field[][] = props.gameBoard;\n    const fieldOnClickIn: Function = props.fieldOnClick;\n    const timeIn: string = props.time;\n    const moveNoIn: number = props.moveNo;\n    let textColor: string = timeIn === \"00:00\" ? \"red\" : \"white\";\n    return (\n        <div>\n            <table className=\"gameBoard\">\n                <thead>\n                    <tr>\n                        <th className={'white'}>Move: {moveNoIn}</th>\n                        <th className={textColor}>Time: {timeIn}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {gameBoardIn.map((row, rowId) => {\n                        return <GameRow key={rowId} arrFields={row}\n                            fieldOnClick={fieldOnClickIn} />\n                    })}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default GameBoard;\n","import React from 'react';\n\nimport './GameInfo.css';\n\ninterface Props {\n    gameStatus: string;\n}\n\nconst GameInfo: React.FC<Props> = (props) => {\n    const gameStatusIn: string = props.gameStatus;\n    return (\n        <div className=\"gameInfo\">\n            <span>\n                <b>Fifteen Puzzle Game:</b> &nbsp;\n                <a href=\"https://en.wikipedia.org/wiki/15_puzzle\">\n                    About the Game\n                </a>\n                <br />\n                <b>Hint: </b> &nbsp;\n                <a href=\"https://www.youtube.com/results?search_query=how+to+solve+fifteen+puzzle\">\n                    How to solve a 15 slide puzzle\n                </a>\n            </span>\n            <br />\n            <span><b>Game status:</b> {gameStatusIn}</span>\n        </div >\n    );\n}\n\nexport default GameInfo;\n","import React, { useEffect, useState } from 'react';\n\nimport Board from './board/Board';\nimport Button from './components/Button';\nimport GameBoard from './conteners/GameBoard';\nimport GameInfo from './conteners/GameInfo'\nimport { scramble, reshape, isSolvable, pyRange } from './utils/arr2d';\n\nimport './App.css';\n\nconst App: React.FC = () => {\n\n    const getRandomSolvablePuzzle = (): number[][] => {\n        let arr1d: number[] = [];\n        let arr2d: number[][] = [];\n        let puzzleSolvable: boolean = false;\n        do {\n            arr1d = pyRange(1, 17, 1);\n            arr1d = scramble(arr1d, 15);\n            arr2d = reshape(arr1d, 4, 4);\n            puzzleSolvable = isSolvable(arr2d);\n        } while (!puzzleSolvable)\n        return arr2d;\n    }\n\n    const [gameBoard, setGameBoard] = useState(\n        new Board(getRandomSolvablePuzzle()));\n    const [gameOver, setGameOver] = useState(false);\n    const [moveCount, setMoveCount] = useState(0);\n    const [time, setTime] = useState(300);\n\n    const timeToTimer = (curTime: number): string => {\n        let min: number = Math.floor(curTime / 60);\n        let sec: number = curTime % 60;\n        let minStr: string = min.toString();\n        let secStr: string = sec.toString();\n        if (minStr.length === 1) { minStr = \"0\" + minStr };\n        if (secStr.length === 1) { secStr = \"0\" + secStr };\n        return minStr + \":\" + secStr;\n    }\n\n    useEffect(() => {\n        if (time > 0 && (!gameOver)) {\n            let intervalId = setInterval(() => {\n                setTime(time - 1);\n            }, 1000);\n            return () => { clearInterval(intervalId) };\n        }\n        if (time <= 0) {\n            setGameOver(true);\n        }\n    }, [time, gameOver])\n\n    const moveNumber = (numToMove: number): void => {\n        if (gameOver) {\n            alert(\"Game is over. Click new game to start again.\");\n        } else if (gameBoard.isMoveLegal(numToMove)) {\n            gameBoard.makeMove(numToMove);\n            setGameBoard(new Board(gameBoard.get2dArrOfNums()));\n            setGameOver(gameBoard.isSolved());\n            setMoveCount(moveCount + 1);\n        }\n    }\n\n    const newGame = (): void => {\n        setGameBoard(new Board(getRandomSolvablePuzzle()));\n        setGameOver(false);\n        setMoveCount(0);\n        setTime(300);\n    }\n\n    return (\n        <div className=\"App\">\n            <br />\n            <GameInfo gameStatus={gameOver ? \"Game Over\" : \"In Progress\"} />\n            <br />\n            <Button className={\"normalBut\"}\n                btnText={\"new game\"} onClick={() => { newGame() }} />\n            <br />\n            <br />\n            <GameBoard time={timeToTimer(time)} moveNo={moveCount}\n                gameBoard={gameBoard.getBoard()}\n                fieldOnClick={moveNumber} />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}